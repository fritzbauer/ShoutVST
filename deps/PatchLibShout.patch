From db37b7bde2145845b5bc1c812ab385055e1fc502 Mon Sep 17 00:00:00 2001
From: roubro1991 <roubro1991@gmx.de>
Date: Mon, 6 Sep 2021 08:43:37 +0200
Subject: [PATCH] Patched to be able to build ShoutVST on windows using MSVC.
 Based on 91cee6f7628193527401a06b2216d66f33e46248

---
 CMakeLists.txt             | 284 +++++++++++++++++++++++++++++
 include/compat.h           |  76 ++++++++
 include/shout/shout.h      | 356 +++++++++++++++++++++++++++++++++++++
 src/connection.c           |  13 +-
 src/format_webm.c          |   2 +-
 win32compat/gettimeofday.c |  28 +++
 win32compat/strings.h      |   5 +
 7 files changed, 760 insertions(+), 4 deletions(-)
 create mode 100644 CMakeLists.txt
 create mode 100644 include/compat.h
 create mode 100644 include/shout/shout.h
 create mode 100644 win32compat/gettimeofday.c
 create mode 100644 win32compat/strings.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..71cae81
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,284 @@
+cmake_minimum_required(VERSION 3.0)
+
+project (shout)
+
+option(WITH_SPEEX "WITH_SPEEX" OFF)
+option(WITH_OPENSSL "WITH_OPENSSL" OFF)
+option(WITH_THEORA "WITH_THEORA" OFF)
+option(WITH_OGG "WITH_OGG" OFF)
+option(WITH_VORBIS "WITH_VORBIS" OFF)
+option(WITHOUT_PTHREAD "WITHOUT_PTHREAD" OFF)
+
+# Inspired from /usr/share/autoconf/autoconf/c.m4
+#FOREACH(KEYWORD "inline" "__inline__" "__inline")
+#   IF(NOT DEFINED C_INLINE)
+#     TRY_COMPILE(C_HAS_${KEYWORD} "${CMAKE_CURRENT_SOURCE_DIR}"
+#       "${CMAKE_CURRENT_SOURCE_DIR}/test_inline.c"
+#       COMPILE_DEFINITIONS "-Dinline=${KEYWORD}")
+#     IF(C_HAS_${KEYWORD})
+#       SET(C_INLINE TRUE)
+#       ADD_DEFINITIONS("-Dinline=${KEYWORD}")
+#     ENDIF(C_HAS_${KEYWORD})
+#   ENDIF(NOT DEFINED C_INLINE)
+#ENDFOREACH(KEYWORD)
+#IF(NOT DEFINED C_INLINE)
+#   ADD_DEFINITIONS("-Dinline=")
+#ENDIF(NOT DEFINED C_INLINE)
+
+include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
+include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
+include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/common)
+
+if(WIN32)
+include_directories(${CMAKE_CURRENT_SOURCE_DIR}/win32compat)
+include_directories(${CMAKE_CURRENT_SOURCE_DIR}/win32compat/shout)
+endif()
+
+if(WIN32)
+add_definitions (-Dstrcasecmp=_stricmp)
+endif()
+
+if(NOT WIN32)
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/shout/shout.h.in ${CMAKE_CURRENT_SOURCE_DIR}/include/shout/shout.h)
+endif()
+
+INCLUDE (CheckIncludeFiles)
+INCLUDE (CheckFunctionExists)
+INCLUDE (CheckIncludeFile)
+
+CHECK_FUNCTION_EXISTS(endhostent HAVE_ENDHOSTENT)
+if(HAVE_ENDHOSTENT) 
+add_definitions(-DHAVE_ENDHOSTENT)
+endif()
+
+CHECK_FUNCTION_EXISTS(ftime HAVE_FTIME)
+if(HAVE_FTIME) 
+add_definitions(-DHAVE_FTIME)
+endif()
+
+CHECK_FUNCTION_EXISTS(getaddrinfo HAVE_GETADDRINFO)
+if(HAVE_GETADDRINFO) 
+add_definitions(-DHAVE_GETADDRINFO)
+endif()
+
+CHECK_FUNCTION_EXISTS(getnameinfo HAVE_GETNAMEINFO)
+if(HAVE_GETNAMEINFO) 
+add_definitions(-DHAVE_GETNAMEINFO)
+endif()
+
+CHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)
+if(HAVE_GETTIMEOFDAY) 
+add_definitions(-DHAVE_GETTIMEOFDAY)
+endif()
+
+
+CHECK_FUNCTION_EXISTS(inet_aton HAVE_INET_ATON)
+if(HAVE_INET_ATON) 
+add_definitions(-DHAVE_INET_ATON)
+endif()
+
+CHECK_FUNCTION_EXISTS(inet_pton HAVE_INET_PTON)
+if(HAVE_INET_PTON) 
+add_definitions(-DHAVE_INET_PTON)
+endif()
+
+CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
+if(HAVE_INTTYPES_H) 
+add_definitions(-DHAVE_INTTYPES_H)
+endif()
+
+CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
+if(HAVE_STDINT_H) 
+add_definitions(-DHAVE_STDINT_H)
+endif()
+
+CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
+if(HAVE_MEMORY_H) 
+add_definitions(-DHAVE_MEMORY_H)
+endif()
+
+CHECK_FUNCTION_EXISTS(nanosleep HAVE_NANOSLEEP)
+if(HAVE_NANOSLEEP) 
+add_definitions(-DHAVE_NANOSLEEP)
+endif()
+
+CHECK_INCLUDE_FILE(pthread.h HAVE_PTHREAD)
+if(HAVE_PTHREAD)
+add_definitions(-DHAVE_PTHREAD)
+endif()
+
+if(WITHOUT_PTHREAD)
+set(HAVE_PTHREAD NO)
+endif()
+
+if(NOT HAVE_PTHREAD)
+add_definitions (-DNO_THREAD)
+endif()
+
+CHECK_FUNCTION_EXISTS(pthread_spin_lock HAVE_PTHREAD_SPIN_LOCK)
+if(HAVE_PTHREAD_SPIN_LOCK)
+add_definitions(-DHAVE_PTHREAD_SPIN_LOCK)
+endif()
+
+CHECK_FUNCTION_EXISTS(sethostent HAVE_SETHOSTENT)
+if(HAVE_SETHOSTENT) 
+add_definitions(-DHAVE_SETHOSTENT)
+endif()
+
+CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
+if(HAVE_STDLIB_H) 
+add_definitions(-DHAVE_STDLIB_H)
+endif()
+
+CHECK_INCLUDE_FILE(strings.h HAVE_STRINGS_H)
+if(HAVE_STRINGS_H) 
+add_definitions(-DHAVE_STRINGS_H)
+endif()
+
+CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
+if(HAVE_STRING_H) 
+add_definitions(-DHAVE_STRING_H)
+endif()
+
+CHECK_INCLUDE_FILE(sys/select.h HAVE_SYS_SELECT_H)
+if(HAVE_SYS_SELECT_H) 
+add_definitions(-DHAVE_SYS_SELECT_H)
+endif()
+
+CHECK_INCLUDE_FILE(sys/socket.h HAVE_SYS_SOCKET_H)
+if(HAVE_SYS_SOCKET_H) 
+add_definitions(-DHAVE_SYS_SOCKET_H)
+endif()
+
+CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
+if(HAVE_SYS_STAT_H) 
+add_definitions(-DHAVE_SYS_STAT_H)
+endif()
+
+CHECK_INCLUDE_FILE(sys/timeb.h HAVE_SYS_TIMEB_H)
+if(HAVE_SYS_TIMEB_H) 
+add_definitions(-DHAVE_SYS_TIMEB_H)
+endif()
+
+CHECK_INCLUDE_FILE(sys/time.h HAVE_SYS_TIME_H)
+if(HAVE_SYS_TIME_H) 
+add_definitions(-DHAVE_SYS_TIME_H)
+endif()
+
+CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
+if(HAVE_SYS_TYPES_H) 
+add_definitions(-DHAVE_SYS_TYPES_H)
+endif()
+
+CHECK_INCLUDE_FILE(sys/uio.h HAVE_SYS_UIO_H)
+if(HAVE_SYS_UIO_H) 
+add_definitions(-DHAVE_SYS_UIO_H)
+endif()
+
+CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
+if(HAVE_UNISTD_H) 
+add_definitions(-DHAVE_UNISTD_H)
+endif()
+
+
+CHECK_INCLUDE_FILE(winsock2.h HAVE_WINSOCK2_H)
+if(HAVE_WINSOCK2_H) 
+add_definitions(-DHAVE_WINSOCK2_H)
+endif()
+
+CHECK_FUNCTION_EXISTS(writev HAVE_WRITEV)
+if(HAVE_WRITEV) 
+add_definitions(-DHAVE_WRITEV)
+endif()
+
+set(PACKAGE_URL https://github.com/Iunusov/libshout-CMAKE)
+set(PACKAGE_BUGREPORT https://github.com/Iunusov/libshout-CMAKE)
+add_definitions (-DVERSION="2.4.1")
+add_definitions (-DLIBSHOUT_MAJOR=2)
+add_definitions (-DLIBSHOUT_MINOR=4)
+add_definitions (-DLIBSHOUT_MICRO=1)
+add_definitions (-DHAVE_GETTIMEOFDAY=1)
+add_definitions (-DTIME_WITH_SYS_TIME)
+
+if(HAVE_PTHREAD)
+aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/common/thread SOURCE_LIB)
+endif()
+aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/common/net SOURCE_LIB)
+aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/common/httpp SOURCE_LIB)
+aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/common/avl SOURCE_LIB)
+aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/common/timing SOURCE_LIB)
+aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src SOURCE_LIB)
+
+list(REMOVE_ITEM SOURCE_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/common/httpp/test.c")
+
+if (NOT WITH_OPENSSL)
+list(REMOVE_ITEM SOURCE_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/tls.c")
+endif()
+
+if(NOT WITH_SPEEX)
+list(REMOVE_ITEM SOURCE_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/codec_speex.c")
+endif()
+
+if(NOT WITH_THEORA)
+list(REMOVE_ITEM SOURCE_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/codec_theora.c")
+endif()
+
+if(NOT WITH_OGG)
+list(REMOVE_ITEM SOURCE_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/codec_opus.c")
+list(REMOVE_ITEM SOURCE_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/format_ogg.c")
+endif()
+
+if(NOT WITH_VORBIS)
+list(REMOVE_ITEM SOURCE_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/codec_vorbis.c")
+endif()
+
+list(REMOVE_ITEM SOURCE_LIB "${CMAKE_CURRENT_SOURCE_DIR}/src/common/avl/test.c")
+
+if(WIN32)
+list(APPEND SOURCE_LIB "${CMAKE_CURRENT_SOURCE_DIR}/win32compat/gettimeofday.c")
+endif()
+
+
+
+add_library(${PROJECT_NAME} ${SOURCE_LIB})
+
+target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
+
+#TARGET_LINK_LIBRARIES(${PROJECT_NAME} libicenet libicetiming libiceavl libicehttpp)  
+
+if(WIN32)
+target_include_directories(${PROJECT_NAME} 
+PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/win32compat/shout
+)
+endif()
+
+if(HAVE_PTHREAD)
+  TARGET_LINK_LIBRARIES(${PROJECT_NAME} pthread)  
+endif()
+
+if(WITH_VORBIS)
+TARGET_LINK_LIBRARIES(${PROJECT_NAME} vorbis)
+endif()
+
+if(WITH_OGG)
+TARGET_LINK_LIBRARIES(${PROJECT_NAME} ogg)
+endif()
+
+if(WITH_SPEEX)
+TARGET_LINK_LIBRARIES(${PROJECT_NAME} speex)
+endif()
+
+if(WITH_THEORA)
+TARGET_LINK_LIBRARIES(${PROJECT_NAME} theora)
+endif()
+
+if(WITH_OPENSSL)
+TARGET_LINK_LIBRARIES(${PROJECT_NAME} ssl)
+endif()
+
+if(WIN32)
+  target_link_libraries(${PROJECT_NAME} wsock32 ws2_32)
+endif()
+
+set_property(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE ON)
+
diff --git a/include/compat.h b/include/compat.h
new file mode 100644
index 0000000..0b08622
--- /dev/null
+++ b/include/compat.h
@@ -0,0 +1,76 @@
+/* Icecast
+ *
+ * This program is distributed under the GNU General Public License, version 2.
+ * A copy of this license is included with this source.
+ *
+ * Copyright 2000-2004, Jack Moffitt <jack@xiph.org, 
+ *                      Michael Smith <msmith@xiph.org>,
+ *                      oddsock <oddsock@xiph.org>,
+ *                      Karl Heyes <karl@xiph.org>
+ *                      and others (see AUTHORS for details).
+ * Copyright 2018,      Philipp "ph3-der-loewe" Schafft <lion@lion.leolix.org>,
+ */
+
+#ifndef __COMPAT_H__
+#define __COMPAT_H__
+
+/* compat.h
+ * 
+ * This file contains most of the ugliness for header portability
+ * and common types across various systems like Win32, Linux and
+ * Solaris.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+#ifdef TIME_WITH_SYS_TIME
+//#  include <sys/time.h>
+#  include <time.h>
+#else
+#  ifdef HAVE_SYS_TIME_H
+#    include <sys/time.h>
+#  else
+#    include <time.h>
+#  endif
+#endif
+
+#ifdef _WIN32
+#  define PATH_SEPARATOR "\\"
+#else
+#  define PATH_SEPARATOR "/"
+#endif
+
+/* Make sure we define 64 bit types */
+#ifdef HAVE_STDINT_H
+#  include <stdint.h>
+#endif
+#ifdef HAVE_INTTYPES_H
+#  include <inttypes.h>
+#endif
+
+#if defined(_WIN32) //&& !defined(HAVE_STDINT_H) && !defined(HAVE_INTTYPES_H)
+//typedef unsigned int size_t;//unsigned int
+typedef int ssize_t;
+//#  define ssize_t int
+#  define int64_t __int64
+#  define uint64_t unsigned __int64
+#  define int32_t __int32
+#  define uint32_t unsigned __int32
+#  define PRIu64  "I64u"
+#  define PRId64  "I64d"
+typedef int socklen_t;
+#endif
+
+/* some defaults if not provided above */
+#ifndef SCNdMAX
+#  define SCNdMAX "lld"
+#endif
+
+#endif /* __COMPAT_H__ */
+
diff --git a/include/shout/shout.h b/include/shout/shout.h
new file mode 100644
index 0000000..fae3014
--- /dev/null
+++ b/include/shout/shout.h
@@ -0,0 +1,356 @@
+/*  shout.h
+ *
+ *  API for libshout, the streaming library for icecast
+ *
+ *  Copyright (C) 2002-2003 the Icecast team <team@icecast.org>,
+ *  Copyright (C) 2012-2015 Philipp "ph3-der-loewe" Schafft <lion@lion.leolix.org>
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Library General Public
+ *  License as published by the Free Software Foundation; either
+ *  version 2 of the License, or (at your option) any later version.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Library General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Library General Public
+ *  License along with this library; if not, write to the Free
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+#ifndef __LIBSHOUT_SHOUT_H__
+#define __LIBSHOUT_SHOUT_H__
+
+#include <sys/types.h>
+#if defined(WIN32) && !defined(__MINGW64__) && !defined(__MINGW32__)
+#include <os.h>
+#endif
+
+#include <stdarg.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define SHOUTERR_SUCCESS            (  0) /* No error */
+#define SHOUTERR_INSANE             ( -1) /* Nonsensical arguments e.g. self being NULL */ 
+#define SHOUTERR_NOCONNECT          ( -2) /* Couldn't connect */
+#define SHOUTERR_NOLOGIN            ( -3) /* Login failed */
+#define SHOUTERR_SOCKET             ( -4) /* Socket error */
+#define SHOUTERR_MALLOC             ( -5) /* Out of memory */
+#define SHOUTERR_METADATA           ( -6)
+#define SHOUTERR_CONNECTED          ( -7) /* Cannot set parameter while connected */
+#define SHOUTERR_UNCONNECTED        ( -8) /* Not connected */
+#define SHOUTERR_UNSUPPORTED        ( -9) /* This libshout doesn't support the requested option */
+#define SHOUTERR_BUSY               (-10) /* Socket is busy */
+#define SHOUTERR_NOTLS              (-11) /* TLS requested but not supported by peer */
+#define SHOUTERR_TLSBADCERT         (-12) /* TLS connection can not be established because of bad certificate */
+#define SHOUTERR_RETRY              (-13) /* Retry last operation. */
+
+#define SHOUT_FORMAT_OGG            (  0) /* Ogg */
+#define SHOUT_FORMAT_MP3            (  1) /* MP3 */
+#define SHOUT_FORMAT_WEBM           (  2) /* WebM */
+#define SHOUT_FORMAT_WEBMAUDIO      (  3) /* WebM, audio only, obsolete. Only used by shout_set_format() */
+#define SHOUT_FORMAT_MATROSKA       (  4) /* Matroska */
+
+/* backward-compatibility alias */
+#define SHOUT_FORMAT_VORBIS         SHOUT_FORMAT_OGG
+
+/* Usages */
+#define SHOUT_USAGE_AUDIO           (0x0001U) /* Audio substreams*/
+#define SHOUT_USAGE_VISUAL          (0x0002U) /* Picture/Video substreams (most often combined with SHOUT_USAGE_AUDIO) */
+#define SHOUT_USAGE_TEXT            (0x0004U) /* Text substreams that are not subtitles */
+#define SHOUT_USAGE_SUBTITLE        (0x0008U) /* Subtitle substreams */
+#define SHOUT_USAGE_LIGHT           (0x0010U) /* Light control substreams */
+#define SHOUT_USAGE_UI              (0x0020U) /* User interface data, such as DVD menus or buttons */
+#define SHOUT_USAGE_METADATA        (0x0040U) /* Substreams that include metadata for the stream */
+#define SHOUT_USAGE_APPLICATION     (0x0080U) /* Application specific data substreams */
+#define SHOUT_USAGE_CONTROL         (0x0100U) /* Substreams that control the infrastructure */
+#define SHOUT_USAGE_COMPLEX         (0x0200U) /* Substreams that are themself a mixture of other types */
+#define SHOUT_USAGE_OTHER           (0x0400U) /* Substream of types not listed here */
+#define SHOUT_USAGE_UNKNOWN         (0x0800U) /* The stream MAY contain additional substreams of unknown nature */
+#define SHOUT_USAGE_3D              (0x1000U) /* The Stream contains information for 3D playback */
+#define SHOUT_USAGE_4D              (0x2000U) /* The Stream contains information for 4D/XD playback */
+
+#define SHOUT_PROTOCOL_HTTP         (  0)
+#define SHOUT_PROTOCOL_XAUDIOCAST   (  1) /* Deprecated. May be removed in future versions. Do not use. */
+#define SHOUT_PROTOCOL_ICY          (  2)
+#define SHOUT_PROTOCOL_ROARAUDIO    (  3)
+
+/* Possible TLS modes */
+#define SHOUT_TLS_DISABLED          (  0) /* Do not use TLS at all */
+#define SHOUT_TLS_AUTO              (  1) /* Autodetect which TLS mode to use if any */
+#define SHOUT_TLS_AUTO_NO_PLAIN     (  2) /* Like SHOUT_TLS_AUTO_NO_PLAIN but does not allow plain connections */
+#define SHOUT_TLS_RFC2818           ( 11) /* Use TLS for transport layer like HTTPS [RFC2818] does. */
+#define SHOUT_TLS_RFC2817           ( 12) /* Use TLS via HTTP Upgrade:-header [RFC2817]. */
+
+/* Possible values for blocking */
+#define SHOUT_BLOCKING_DEFAULT      (255) /* Use the default blocking setting. */
+#define SHOUT_BLOCKING_FULL         (  0) /* Block in all I/O related functions */
+#define SHOUT_BLOCKING_NONE         (  1) /* Do not block in I/O related functions */
+
+#define SHOUT_AI_BITRATE            "bitrate"
+#define SHOUT_AI_SAMPLERATE         "samplerate"
+#define SHOUT_AI_CHANNELS           "channels"
+#define SHOUT_AI_QUALITY            "quality"
+
+#define SHOUT_META_NAME             "name"
+#define SHOUT_META_URL              "url"
+#define SHOUT_META_GENRE            "genre"
+#define SHOUT_META_DESCRIPTION      "description"
+#define SHOUT_META_IRC              "irc"
+#define SHOUT_META_AIM              "aim"
+#define SHOUT_META_ICQ              "icq"
+
+#define SHOUT_CALLBACK_PASS         (  1) /* Pass the event to the next handler */
+
+typedef enum {
+    SHOUT_CONTROL__MIN = 0,
+    SHOUT_CONTROL_GET_SERVER_CERTIFICATE_AS_PEM,
+    SHOUT_CONTROL_GET_SERVER_CERTIFICATE_CHAIN_AS_PEM,
+    SHOUT_CONTROL__MAX = 32767
+} shout_control_t;
+
+typedef enum {
+    SHOUT_EVENT__MIN = 0,
+    SHOUT_EVENT_TLS_CHECK_PEER_CERTIFICATE,
+    SHOUT_EVENT__MAX = 32767
+} shout_event_t;
+
+typedef struct shout shout_t;
+typedef struct _util_dict shout_metadata_t;
+
+typedef int (*shout_callback_t)(shout_t *shout, shout_event_t event, void *userdata, va_list ap);
+
+
+/* ----------------[ Generic ]---------------- */
+
+/* initializes the shout library. Must be called before anything else */
+void shout_init(void);
+
+/* shuts down the shout library, deallocating any global storage. Don't call
+ * anything afterwards */
+void shout_shutdown(void);
+
+/* returns a static version string.  Non-null parameters will be set to the
+ * value of the library major, minor, and patch levels, respectively */
+const char *shout_version(int *major, int *minor, int *patch);
+
+/* Allocates and sets up a new shout_t.  Returns NULL if it can't get enough
+ * memory.  The returns shout_t must be disposed of with shout_free. */
+shout_t *shout_new(void);
+
+/* Free all memory allocated by a shout_t */
+void shout_free(shout_t *self);
+
+/* Returns a statically allocated string describing the last shout error
+ * to occur.  Only valid until the next libshout call on this shout_t */
+const char *shout_get_error(shout_t *self);
+
+/* Return the error code (e.g. SHOUTERR_SOCKET) for this shout instance */
+int shout_get_errno(shout_t *self);
+
+/* returns SHOUTERR_CONNECTED or SHOUTERR_UNCONNECTED */
+int shout_get_connected(shout_t *self);
+
+
+/* ----------------[ Configuration ]---------------- */
+/* Parameter manipulation functions.  libshout makes copies of all parameters,
+ * the caller may free its copies after giving them to libshout.  May return
+ * SHOUTERR_MALLOC */
+
+/* Connection parameters */
+int shout_set_host(shout_t *self, const char *host);
+const char *shout_get_host(shout_t *self);
+
+int shout_set_port(shout_t *self, unsigned short port);
+unsigned short shout_get_port(shout_t *self);
+
+int shout_set_agent(shout_t *self, const char *agent);
+const char *shout_get_agent(shout_t *self);
+
+/* See SHOUT_TLS_* above */
+int shout_set_tls(shout_t *self, int mode);
+int shout_get_tls(shout_t *self);
+
+/* Set the directory for CA certs. Default: operating system's default */
+int shout_set_ca_directory(shout_t *self, const char *directory);
+const char *shout_get_ca_directory(shout_t *self);
+
+/* Set a CA cert file for checking. If you use a self signed server cert
+ * you can pass this cert using this function for verification.
+ * Default: operating system's default */
+int shout_set_ca_file(shout_t *self, const char *file);
+const char *shout_get_ca_file(shout_t *self);
+
+/* Set list of allowed ciphers.
+ * This function should only be used in case of using an old libshout
+ * after some attacks got known. Watch the icecast mailinglist for
+ * known problems.
+ * DO NOT SET THIS TO ANY FIXED VALUE. IF YOU USE THIS FUNCTION
+ * EXPOSE IT TO THE USER. OTHERWISE YOU WILL HARM SECURITY.
+ * Default: internal list of secure ciphers. */
+int shout_set_allowed_ciphers(shout_t *self, const char *ciphers);
+const char *shout_get_allowed_ciphers(shout_t *self);
+
+/* Authentication parameters */
+int shout_set_user(shout_t *self, const char *username);
+const char *shout_get_user(shout_t *self);
+
+int shout_set_password(shout_t *, const char *password);
+const char *shout_get_password(shout_t *self);
+
+/* Set a client certificate for TLS connections.
+ * This must be in PEM format with both cert and private key in the same file.
+ * Default: none. */
+int shout_set_client_certificate(shout_t *self, const char *certificate);
+const char *shout_get_client_certificate(shout_t *self);
+
+/* Mount parameters */
+int shout_set_mount(shout_t *self, const char *mount);
+const char *shout_get_mount(shout_t *self);
+
+/* Other parameters */
+/* takes a SHOUT_AI_xxxx argument */
+int shout_set_audio_info(shout_t *self, const char *name, const char *value);
+const char *shout_get_audio_info(shout_t *self, const char *name);
+
+/* takes a SHOUT_META_xxxx argument */
+int shout_set_meta(shout_t *self, const char *name, const char *value);
+const char *shout_get_meta(shout_t *self, const char *name);
+
+int shout_set_public(shout_t *self, unsigned int make_public);
+unsigned int shout_get_public(shout_t *self);
+
+/* Set the content language.
+ * Values as per RFC5646 Section 2.1.
+ * This lists the target audiance language(s), not the language of songs
+ * (unless the station has a focus on songs in a specific language).
+ * The value of NULL is allowed if the content language is not known or is expected to change.
+ *
+ * Examples:
+ *  A German station with moderations and news in German and Gamern and international songs
+ *  would generally set this to "de-DE".
+ *  A similar station in Switzerland would set this to "de-CH".
+ *  A station with content in Portuguese, and Klingon should set this to "pt, tlh".
+ */
+int shout_set_content_language(shout_t *self, const char *content_language);
+const char *shout_get_content_language(shout_t *self);
+
+/* Set the format of the content to send.
+ * * format is one of SHOUT_FORMAT_xxxx.
+ * * usage is a bit vector composed of SHOUT_USAGE_xxxx.
+ * * codecs is NULL as of this version. Future versions will also support NULL.
+ */
+int shout_set_content_format(shout_t *self, unsigned int format, unsigned int usage, const char *codecs);
+int shout_get_content_format(shout_t *self, unsigned int *format, unsigned int *usage, const char **codecs);
+
+/* takes a SHOUT_PROTOCOL_xxxxx argument */
+int shout_set_protocol(shout_t *self, unsigned int protocol);
+unsigned int shout_get_protocol(shout_t *self);
+
+/* Instructs libshout to use nonblocking I/O. Must be called before
+ * shout_open (no switching back and forth midstream at the moment).
+ * nonblocking is one of SHOUT_BLOCKING_xxx. */
+int shout_set_nonblocking(shout_t* self, unsigned int nonblocking);
+unsigned int shout_get_nonblocking(shout_t *self);
+
+
+/* ----------------[ Actions ]---------------- */
+
+/* Opens a connection to the server.  All parameters must already be set */
+int shout_open(shout_t *self);
+
+/* Closes a connection to the server */
+int shout_close(shout_t *self);
+
+/* Send data to the server, parsing it for format specific timing info */
+int shout_send(shout_t *self, const unsigned char *data, size_t len);
+
+/* Send unparsed data to the server.  Do not use this unless you know
+ * what you are doing. 
+ * Returns the number of bytes written, or < 0 on error.
+ */
+ssize_t shout_send_raw(shout_t *self, const unsigned char *data, size_t len);
+
+/* return the number of bytes currently on the write queue (only makes sense in
+ * nonblocking mode). */
+ssize_t shout_queuelen(shout_t *self);
+  
+/* Puts caller to sleep until it is time to send more data to the server */
+void shout_sync(shout_t *self);
+
+/* Amount of time in ms caller should wait before sending again */
+int shout_delay(shout_t *self);
+
+
+/* ----------------[ MP3/AAC ONLY ]---------------- */
+/* Functions in this block are for use with MP3, and AAC streams only */
+
+/* Sets MP3 metadata.
+ * Returns:
+ *   SHOUTERR_SUCCESS
+ *   SHOUTERR_UNSUPPORTED if format isn't MP3
+ *   SHOUTERR_MALLOC
+ *   SHOUTERR_INSANE
+ *   SHOUTERR_NOCONNECT
+ *   SHOUTERR_SOCKET
+ */
+int shout_set_metadata(shout_t *self, shout_metadata_t *metadata);
+
+/* Allocates a new metadata structure.  Must be freed by shout_metadata_free. */
+shout_metadata_t *shout_metadata_new(void);
+
+/* Free resources allocated by shout_metadata_t */
+void shout_metadata_free(shout_metadata_t *self);
+
+/* Add a parameter to the metadata structure.
+ * Returns:
+ *   SHOUTERR_SUCCESS on success
+ *   SHOUTERR_INSANE if self isn't a valid shout_metadata_t* or name is null
+ *   SHOUTERR_MALLOC if memory can't be allocated */
+int shout_metadata_add(shout_metadata_t *self, const char *name, const char *value);
+
+
+/* ----------------[ Advanced ]---------------- */
+/* Advanced. Do not use. */
+
+int shout_control(shout_t *self, shout_control_t control, ...);
+int shout_set_callback(shout_t *self, shout_callback_t callback, void *userdata);
+
+
+/* ----------------[ Obsolete ]---------------- */
+/* Those functions are obsolete and MUST NOT be used in newer software.
+ * They may be removed with any future version.
+ */
+
+int shout_set_name(shout_t *self, const char *name); // obsolete
+const char *shout_get_name(shout_t *self); // obsolete
+
+int shout_set_url(shout_t *self, const char *url); // obsolete
+const char *shout_get_url(shout_t *self); // obsolete
+
+int shout_set_genre(shout_t *self, const char *genre); // obsolete
+const char *shout_get_genre(shout_t *self); // obsolete
+
+int shout_set_description(shout_t *self, const char *description); // obsolete
+const char *shout_get_description(shout_t *self); // obsolete
+
+/* takes a SHOUT_FORMAT_xxxx argument */
+int shout_set_format(shout_t *self, unsigned int format); // obsolete
+unsigned int shout_get_format(shout_t *self); // obsolete
+
+int shout_set_dumpfile(shout_t *self, const char *dumpfile); // obsolete
+const char *shout_get_dumpfile(shout_t *self); // obsolete
+
+#ifdef __cplusplus
+}
+#endif
+
+/* --- Compiled features --- */
+
+#define SHOUT_THREADSAFE @SHOUT_THREADSAFE@
+#define SHOUT_TLS        @SHOUT_TLS@
+
+#endif /* __LIBSHOUT_SHOUT_H__ */
diff --git a/src/connection.c b/src/connection.c
index 18a3b3c..ac50b2c 100644
--- a/src/connection.c
+++ b/src/connection.c
@@ -30,9 +30,16 @@
 #ifdef HAVE_SYS_SELECT_H
 #   include <sys/select.h>
 #else
-#   include <sys/time.h>
-#   include <sys/types.h>
-#   include <unistd.h>
+#   ifdef HAVE_SYS_TIME_H
+#       include <sys/time.h>
+#   endif
+#       include <time.h>
+#       include <sys/types.h>
+#   ifdef HAVE_UNISTD_H
+#       include <unistd.h>
+#   else
+#       include <io.h>
+#   endif
 #endif
 
 #include <shout/shout.h>
diff --git a/src/format_webm.c b/src/format_webm.c
index 13c469a..265798d 100644
--- a/src/format_webm.c
+++ b/src/format_webm.c
@@ -437,7 +437,7 @@ static size_t copy_possible(const void *src_base,
 
     if (target_space < to_copy) to_copy = target_space;
 
-    memcpy(target_base + *target_position, src_base + *src_position, to_copy);
+    memcpy((char*)target_base + *target_position, (char*)src_base + *src_position, to_copy);
 
     *src_position += to_copy;
     *target_position += to_copy;
diff --git a/win32compat/gettimeofday.c b/win32compat/gettimeofday.c
new file mode 100644
index 0000000..1bc6f7b
--- /dev/null
+++ b/win32compat/gettimeofday.c
@@ -0,0 +1,28 @@
+#define WIN32_LEAN_AND_MEAN
+#include <Windows.h>
+#include <stdint.h> // portable: uint64_t   MSVC: __int64 
+
+ // MSVC defines this in winsock2.h!?
+typedef struct timeval {
+	long tv_sec;
+	long tv_usec;
+} timeval;
+
+int gettimeofday(struct timeval * tp, struct timezone * tzp)
+{
+	// Note: some broken versions only have 8 trailing zero's, the correct epoch has 9 trailing zero's
+	static const uint64_t EPOCH = ((uint64_t)116444736000000000ULL);
+
+	SYSTEMTIME  system_time;
+	FILETIME    file_time;
+	uint64_t    time;
+
+	GetSystemTime(&system_time);
+	SystemTimeToFileTime(&system_time, &file_time);
+	time = ((uint64_t)file_time.dwLowDateTime);
+	time += ((uint64_t)file_time.dwHighDateTime) << 32;
+
+	tp->tv_sec = (long)((time - EPOCH) / 10000000L);
+	tp->tv_usec = (long)(system_time.wMilliseconds * 1000);
+	return 0;
+}
\ No newline at end of file
diff --git a/win32compat/strings.h b/win32compat/strings.h
new file mode 100644
index 0000000..1767d4d
--- /dev/null
+++ b/win32compat/strings.h
@@ -0,0 +1,5 @@
+//#pragma once
+
+#include <BaseTsd.h>
+typedef SSIZE_T ssize_t;
+typedef int socklen_t;
-- 
2.33.0.windows.2

